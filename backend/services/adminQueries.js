
var db = require('../utils/connection');


module.exports = {
    getUsersEmail: "SELECT * FROM users WHERE email = ? and is_admin=1",
    getFooter : "SELECT * FROM web_footer",
    getWebContent : "SELECT * FROM web_content",
    updateFooter : "update web_footer SET description=?,email=?,contact=?", 
    updateWallet : "update user_wallet set ? where user_id =?",
    updateWebContent : "update web_content SET ?",
    getUsers : "SELECT us.id,us.is_active,us.full_name,us.address,us.is_admin,us.email,us.is_email_verify,us.country_id,us.user_name,us.deactivate_account, ct.id as country_id,ct.name as country_name,us.is_featured,case when us.telent_status=0 then 'Pending' when us.telent_status=1 then 'Approved' when us.telent_status=2 then 'Rejected' else 'Not Applied' end as telent_status_name, us.telent_status from users as us  LEFT JOIN country as ct ON ct.id = us.country_id  where  us.is_admin=0 ORDER BY us.id DESC", 
    getSingleUser : "Select * from users where id =?",
    getOrderDetail : "SELECT u.*,o.* FROM users as u LEFT JOIN  orders as o ON u.id=o.user_id  where ? ",
    insertMarketPlace : "insert into marketplace SET ?",
    getMarketPlace : "Select id,title,author,price,item_image,price from marketplace",
    insertCategory : "insert into item_category SET ?",
    deleteCategory : "DELETE FROM item_category WHERE id =?",
    updateCategory : "update item_category SET ? where id =?",
    updateUser : "update users SET ? where id =?",
    Category : "Select ic.id,ic.name,nt.name as nft_type,nt.id as nft_type_id from item_category as ic left join nft_type as nt on nt.id=ic.nft_type_id",
    getDigitalCategory : "Select ic.id,ic.name,nt.name as nft_type,nt.id as nft_type_id from item_category as ic left join nft_type as nt on nt.id=ic.nft_type_id where ic.nft_type_id=1 and ic.id in (1,2,3)",
    getUserDigitalCategory : "Select ic.id,ic.name,nt.name as nft_type,nt.id as nft_type_id from item_category as ic left join nft_type as nt on nt.id=ic.nft_type_id where ic.nft_type_id=1 and ic.id in (1,2,3)",
    getRealEstateCategory :"Select id,name from item_category where nft_type_id=2 limit 8",
    getUserRealEstateCategory :"Select id,name from item_category where nft_type_id=2 and id in(5,6,7,8)",
    singleCategory : "Select ic.id,ic.name,nt.name as nft_type,nt.id as nft_type_id from item_category as ic left join nft_type as nt on nt.id=ic.nft_type_id where ic.id=?",
    getNftType : "select * from nft_type",
    insertItem : "insert into item SET ?",
    deleteItem : "Delete from item where id =?",
    updateItem : "update item SET ? where id =?",
    getItem : "Select i.id,,i.name,i.description,i.image,i.file_type,i.owner,i.item_category_id,i.quantity,i.token_id,i.is_active from item as i  where is_sold=0 group by item_id,owner_id) and i.is_active=1 and (ie.expiry_date >= now() or ie.expiry_date is null) ) ORDER BY i.id DESC", 
    getAdminItem : "Select users.full_name as owner_name,cu.full_name as creator_name,cu.id as creator_id, i.id,i.is_featured,i.royalty_percent,i.owner_id,i.verified_tag,i.name,i.description,i.is_on_sale,i.image,i.file_type,i.item_category_id,i.quantity,ic.name as item_category,i.token_id,i.price,i.is_active,i.is_sold,i.expiry_date from item as i left join item_category as ic on ic.id=i.item_category_id left JOIN users ON i.owner_id=users.id left join users as cu on cu.id=i.created_by where (i.expiry_date >= now() or i.expiry_date is null) and coalesce(i.start_date,now())<=now() ORDER BY i.id DESC",
    getAdminNFT : "Select i.id,i.is_featured,i.name,i.sell_type, i.blockchainType,i.user_collection_id,i.is_trending,i.is_on_sale, i.image,i.description,i.local_image,i.file_type,i.owner,i.item_category_id,i.quantity,ic.name as item_category,i.token_id,i.price,i.is_active,i.is_sold,i.expiry_date from item as i left join item_category as ic on ic.id=i.item_category_id where  (i.expiry_date >= now() or i.expiry_date is null or i.expiry_date='0000-00-00 00:00:00') and (coalesce(i.start_date,now())<=now() or i.start_date='0000-00-00 00:00:00') and i.owner_id=1 ORDER BY i.id DESC",
  //  listSingleItem : "Select i.id,i.name,i.description,i.image,i.owner,i.item_category_id,ic.name as category_name,i.token_id,i.price from item as i left join item_category as ic on ic.id=i.item_category_id where i.id = ? ",
     listSingleItem : "Select ie.id as item_edition_id,i.id as item_id,i.name,i.description,i.image,i.file_type,i.owner,i.item_category_id,ic.name as category_name,i.token_id,i.price from item_edition as ie left join item as i on i.id=ie.item_id left join item_category as ic on ic.id=i.item_category_id where ie.id = ? and (ie.expiry_date >= now() or i.expiry_date is null)",
    dashItem : "select sum(coalesce(nft_count,0)) as nft_count,sum(coalesce(today_nft_count,0)) as today_nft_count, sum(coalesce(total_sale_ada,0)) as total_sale_ada, sum(coalesce(today_sale_ada,0)) as today_sale_ada, sum(coalesce(sold_nft,0)) as sold_nft, sum(coalesce(sold_nft_today,0)) as sold_nft_today,sum(coalesce(user_count,0)) as user_count,sum(coalesce(user_count_today,0)) as user_count_today,sum(coalesce(total_fee,0)) as total_fee, sum(coalesce(total_fee_today,0)) as  total_fee_today from (select count(id) as nft_count,sum(case when date(datetime)=current_date() THEN 1 else 0 end) as today_nft_count, 0 as total_sale_ada,0 as today_sale_ada, 0 as sold_nft, 0 as sold_nft_today,0 as user_count, 0 as user_count_today,0 as total_fee, 0 as total_fee_today from item UNION ALL select 0 as nft_count,0  as today_nft_count, sum(amount) as total_sale_ada,sum(case when date(datetime)=current_date() THEN amount else 0 end)  as today_sale_ada, COUNT(id) as sold_nft, sum(case when date(datetime)=current_date() THEN 1 else 0 end) as sold_nft_today,0 as user_count, 0 as user_count_today,0 as total_fee, 0 as total_fee_today from transaction where transaction_type_id=1 and status=1 UNION ALL select 0 as nft_count,0 as today_nft_count, 0 as total_sale_ada,0 as today_sale_ada, 0 as sold_nft, 0 as sold_nft_today,count(id) as user_count, sum(case when date(datetime)=current_date() THEN 1 else 0 end) as user_count_today,0 as total_fee, 0 as total_fee_today from users where is_admin=0 UNION ALL select 0 as nft_count,0 as today_nft_count, 0 as total_sale_ada,0 as today_sale_ada, 0 as sold_nft, 0 as sold_nft_today,0 as user_count, 0 as user_count_today,sum(amount)*-1 as total_fee, sum(case when date(datetime)=current_date() THEN amount*-1 else 0 end) as total_fee_today from transaction where transaction_type_id in (14,15) )as a;",
    BlockUser : "Update users set is_active=? WHERE id =?",
    getProfile :  "Select profile_pic from users where email=? and  is_admin=1",
    updateProfile : "update users SET profile_pic=? where email=? and is_admin=1",
    getPassword : "Select password from users where email =? and is_admin=1",
    updatepassword : "update users SET password=? where email=? and is_admin=1",
    getTelentUsers : "Select u.id as user_id,coalesce(t.first_name,u.full_name) as first_name,t.last_name,coalesce(t.email,u.email) as email,t.description,t.nft_hash,t.city,t.follower,ct.name as country_name,u.telent_status,u.profile_pic from users as u left join telent as t on t.user_id=u.id  LEFT JOIN country as ct ON ct.id = t.country_id where (u.telent_status=1 or t.id is not null) and u.deactivate_account=0 order by t.id desc",
    getRealEstateUsers: "Select u.id as user_id,coalesce(r.first_name,u.full_name) as first_name,r.last_name,coalesce(r.email,u.email) as email,r.description,r.city,ct.name as country_name,u.real_estate_status,u.profile_pic from users as u left join real_estate_user as r on r.user_id=u.id  LEFT JOIN country as ct ON ct.id = r.country_id where (u.real_estate_status=1 or r.id is not null) and u.deactivate_account=0 order by r.id desc",
    getWebImage : "Select * from web_images",
    getRealEstateImage : "Select * from real_estate_images",
    updateWebImage : "update web_images SET ? where id =?",
    updateRealEstateImage : "update real_estate_images SET ? where id =?",
    createUserWallet : "insert into user_wallet SET ?",
    insertEdition : "insert into item_edition SET ?",
    getAllCollection : "SELECT id,is_hide, is_featured, is_verified, user_id, name, description, datetime, facebook, insta, twitter,discord,telegram, profile_pic, banner FROM user_collection ORDER BY id DESC",
    getAdminCollection : "SELECT * FROM `user_collection` where user_id = 1 ORDER BY id DESC",
    updateAdminCollection : "UPDATE user_collection SET ? where id = ?",
    deleteAdminCollection : "DELETE from user_collection WHERE id = ?",
    getTransactionHistory : "SELECT amount, currency, to_address, datetime from transaction",
    getPrivacypolicy : "SELECT * From privacy_policy",
    updateprivacyAndPolicy : "UPDATE privacy_policy SET ? WHERE id = ?",
    getTermsConditions : "SELECT * from terms_conditions",
    updateTermsConditions : "UPDATE terms_conditions SET ? WHERE id = ?",
    getAbout : "SELECT * from about",
    updateAbout : "UPDATE about SET ? WHERE id = ?",
    getAddress : "SELECT public from user_wallet",
    getSingleUserDetail  : "SELECT dob, phone, description, googleAuthCode from users where id = ?",
    getUserTransaction : "select t.id as transaction_id,tt.name as transaction_type, u.id as user_id,u.full_name,u.email,i.id as item_id,i.name as item_name,i.description,i.image,i.file_type,round(t.amount,2) as price,date_format(i.datetime,'%d-%M-%y') as nft_datetime,date_format(t.datetime,'%d-%M-%y') as purchase_datetime,cu.full_name as creator from item as i inner join transaction as t on t.item_id=i.id and t.user_id=? and t.status=1 left join users as u on u.id=i.owner_id left join users as cu on cu.id=i.created_by left join transaction_type as tt on tt.id=t.transaction_type_id where t.user_id=? order by t.id desc",
    // insertSupport : "INSERT into support SET ?",
    // updateSupport : "UPDATE support SET ? WHERE category_id = ?",
    // deleteSupport : "DELETE FROM support WHERE category_id =?",
    // getUserDetails : "SELECT dob, phone, googleAuthCode FROM users where user_id = ?"    
    insertSupport : "INSERT into support SET ?",
    updateSupport : "UPDATE support SET ? WHERE id = ?",
    deleteSupport : "DELETE FROM support WHERE id =?",
    supportList:"select s.id as support_id,sc.name as support_category, s.question,s.answer from support as s left join support_category as sc on sc.id=s.category_id order by sc.id,s.id",
    supportListById:"select s.id as support_id,sc.id as category_id,sc.name as support_category, s.question,s.answer from support as s left join support_category as sc on sc.id=s.category_id where s.id=?",
    getSupportCategory:"select * from support_category order by id",
    getWithdrawHistory : "SELECT to_address, amount, currency, datetime from transaction WHERE user_id = 1",
    getFees : "SELECT single_nft_fee, bulk_nft_fee, bulk_nft_count from settings",
    updateFees : "UPDATE settings SET single_nft_fee = ? , bulk_nft_fee = ? , bulk_nft_count = ? WHERE  id = ?",
    getTransactionFee : "SELECT sale_price_percent, minimum_transaction_fee from settings",
    getAllTransaction : "select t.to_address,t.amount, t.currency,t.datetime,tt.name as transaction_type,ts.name as transaction_status from transaction as t left join transaction_type as tt on tt.id=t.transaction_type_id left join transaction_status as ts on ts.id=t.status",
    // deleteUserCollection : "DELETE from user_collection WHERE id = ?",
    insertAdminCollection : "INSERT into user_collection SET ?",
    getCollectionItemCount : "select count(id) as itemCount from item where user_collection_id=?",
    deleteUserCollection : "Delete from user_collection where id=?",
    getTransactionFilter : "SELECT * FROM `transaction_type` where id in (select distinct transaction_type_id from transaction)",
    addUserCollectionFeatured : "update user_collection SET ? where id =?",
    addAdminCollectionFeatured : "update user_collection SET ? where id =?",
    addUserNftFeatured : "update item SET ? where id =?",
    addAdminNftFeatured : "update item SET is_featured=? where id =?",
    userActivate : "update users SET is_active = 1 where id=?",
    userInactive : "update users SET is_active = 0 where id=?",
    userCollectionVerifiedTag : "update user_collection SET ? where id = ?",
    addOnSale : "UPDATE item SET ? WHERE id = ?",
    getOnSale : "SELECT name, type From is_on_sale",
    getUserNftById  : "SELECT name, description, price, image FROM item WHERE id = ?",
    hideCollection : "UPDATE user_collection SET ? WHERE id = ?",
    showCollection : "UPDATE user_collection SET ? WHERE id = ?",
    updateTransactionFee : "UPDATE settings SET sale_price_percent = ?, minimum_transaction_fee = ? WHERE id = ?",
    getWalletDetail : "select u.user_name, uw.user_id,uw.wallet_name,uw.wallet_password,uw.public,uw.private,coalesce(sum(t.amount),0) as balance from user_wallet as uw left join transaction as t on t.user_id=uw.user_id and t.status=1 and transaction_type_id in (1,6,3,5,10,8,11) left join users as u on uw.user_id=u.id where uw.user_id= ? group by uw.user_id,uw.public ",
    getBulkNFT : "SELECT * from item WHERE bulk_nft_master_id > 0",
    userWallet : "Select * from user_wallet where user_id =?",
    insertBulkNFT : "insert into item SET ?",
    insertSingleNFTAttribute : "insert into item_attributes SET ?",
    gamesCategory : "SELECT id,name from games_category",
    updateGamesCategory : "update games_category set ? where id =?",
    deleteGamesCategory : "DELETE FROM games_category WHERE id =?",
    insertGamesCategory : "insert into games_category SET ?",
    singleGamesCategory :"SELECT id,name from games_category where category_id =?",
    getfaqlist: "SELECT * from faq_list order by id desc ",
    faqadd: "insert into faq_list SET ?",
    faqdelete: "DELETE from faq_list where id =?",

}